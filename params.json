{"name":"Mammock","tagline":"Mammock is a node.js service mocking framework designed to be quick and easy, allowing developers to fill the \"missing gaps\" in services during development.","body":"# mammock [![Build Status](https://secure.travis-ci.org/earmbrust/mammock.png?branch=master)](http://travis-ci.org/earmbrust/mammock) [![Dependency Status](https://gemnasium.com/earmbrust/mammock.png)](https://gemnasium.com/earmbrust/mammock) [![Coverage Status](https://coveralls.io/repos/earmbrust/mammock/badge.png)](https://coveralls.io/r/earmbrust/mammock)\r\n\r\nMammock is a node.js service mocking framework designed to be quick and easy, allowing developers to fill the \"missing gaps\" in services during development.\r\n\r\n## Getting Started\r\nInstall the module with: `npm install mammock`\r\n\r\nThe command line script and library can also be installed globally, with: `npm install -g mammock`\r\n\r\n_Note: To install globally, it may be necessary to become a superuser on your OS with a command such as `sudo`._\r\n\r\n## Documentation\r\n### Basic Usage\r\n```\r\nUSAGE: node mammock [--port <ARG1>] [--root <ARG1>] [--silent] \r\n  -p, --port <ARG1>     specify the port to listen on\r\n  -r, --root <ARG1>     root path to serve from\r\n  -s, --silent          runs the server without console output\r\n```\r\n\r\n### Adanced Usage\r\nHere is an example node, or endpoint, in Mammock:\r\n```javascript\r\nmodule.exports  = function () {\r\n    //We create a variable to return, 'node', so that we can set properties to the functions\r\n    var node = {\r\n        get: function (route, request, response) {\r\n            return {\r\n                status: 200,\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                response: JSON.stringify({})\r\n            }\r\n        },\r\n        post: function (route, request, response) {\r\n            var endpoint = this,\r\n                postData = \"\";\r\n\r\n            endpoint.info(\"Now overriding the POST response...\")\r\n\r\n            request.on('data', function (data) {\r\n                endpoint.info(\"Receiving POST data...\");\r\n                postData += data;\r\n            });\r\n            request.on('end', function () {\r\n                endpoint.info(\"Finished receiving POST data\");\r\n                \r\n                endpoint.info(\"Writing header response to POST request...\");\r\n                response.writeHeader(200, {\r\n                    \"Content-Type\": \"application/json\"\r\n                });\r\n                endpoint.info(\"Writing response to POST request...\");\r\n                response.write(postData);\r\n                response.end();\r\n\r\n            });\r\n        },\r\n        put: function (route, request, response, data) {\r\n            return {\r\n                status: 200,\r\n                contentType: \"application/json\",\r\n                response: data\r\n            }\r\n        },\r\n        delete: function (route, request, response) {\r\n            return {\r\n                status: 200,\r\n                contentType: \"application/json\"\r\n            }\r\n        }\r\n    }\r\n\r\n    //overriding the node allows us to handle the request manually\r\n    node.post.override = true;\r\n    //setting capture on the method will allow you to have the method invoked\r\n    //after the server has already captured the data, and pass it in as the \r\n    //optional fourth parameter\r\n    node.put.capture = true;\r\n    return node;\r\n}\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n### 0.2.3\r\n* Server now retrieves package.json data\r\n* Server can now return the mammock version via Mammock.getVersion()\r\n* CLI mammock now reads the displayed version from the server\r\n* `grunt build` now runs the `test` task before building\r\n* CLI mammock can now be shutdown cleanly with Ctrl-c\r\n\r\n### 0.2.2\r\n* Switched to mocha for testing, as it provides more reporters\r\n* Improved testing a bit\r\n* Switched npm test script from `npm nodeunit` to `npm test`\r\n* One step closer to coveralls reporting...\r\n* Fix for slightly outdated grunt-watch-contrib dependency (thank you gemnasium)\r\n\r\n### 0.2.1\r\n* Minor fix for tests\r\n* Improved test mocks somewhat, but they still need some attention\r\n* Moved source files to live in src/, to clean up project root\r\n\r\n### 0.2.0\r\n* Major rewrite of the routing engine to better suit a multitude of custom requesti methods\r\n* Removed Mammock.Endpoint and Mammock.Server, moving main constructor to the initial mammock instance\r\n* endpoints now get extended with logging abilities\r\n\r\n### 0.1.6\r\n* Fixed documentation error stating the version was 0.2.5\r\n* Fixed major GET bug\r\n\r\n### 0.1.5\r\n* Fixed build further\r\n* Actually ready for release\r\n\r\n### 0.1.4\r\n* Cleaned up build\r\n* First npm publish\r\n\r\n### 0.1.3\r\n* Fixed major endpoint bug, which resulted in endpoints being inaccessible\r\n* Fixed index routing bug\r\n\r\n### 0.1.2\r\n* Added timestamps to logs\r\n* Added -s/--silent option to allow running the server sans output\r\n* Renamed bin/mammock to bin/mammock.js because no extension is stupid.\r\n* endpoints should now be reachable\r\n\r\n### 0.1.1\r\n* First functional server running as intended.\r\n* Options added to command line\r\n\r\n### 0.1.0\r\n* Added initial structure and got .travis.yml not being bejankity.\r\n\r\n## License\r\nCopyright (c) 2013 Elden Armbrust  \r\nLicensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}